//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 2 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `customGrey`.
    static let customGrey = Rswift.ColorResource(bundle: R.hostingBundle, name: "customGrey")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "customGrey", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func customGrey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.customGrey, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "customGrey", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func customGrey(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.customGrey.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 3 files.
  struct file {
    /// Resource file `Gilroy-Bold.ttf`.
    static let gilroyBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Gilroy-Bold", pathExtension: "ttf")
    /// Resource file `Gilroy-Regular.ttf`.
    static let gilroyRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Gilroy-Regular", pathExtension: "ttf")
    /// Resource file `Gilroy-SemiBold.ttf`.
    static let gilroySemiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Gilroy-SemiBold", pathExtension: "ttf")

    /// `bundle.url(forResource: "Gilroy-Bold", withExtension: "ttf")`
    static func gilroyBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gilroyBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Gilroy-Regular", withExtension: "ttf")`
    static func gilroyRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gilroyRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Gilroy-SemiBold", withExtension: "ttf")`
    static func gilroySemiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gilroySemiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 3 fonts.
  struct font: Rswift.Validatable {
    /// Font `Gilroy-Bold`.
    static let gilroyBold = Rswift.FontResource(fontName: "Gilroy-Bold")
    /// Font `Gilroy-Regular`.
    static let gilroyRegular = Rswift.FontResource(fontName: "Gilroy-Regular")
    /// Font `Gilroy-SemiBold`.
    static let gilroySemiBold = Rswift.FontResource(fontName: "Gilroy-SemiBold")

    /// `UIFont(name: "Gilroy-Bold", size: ...)`
    static func gilroyBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gilroyBold, size: size)
    }

    /// `UIFont(name: "Gilroy-Regular", size: ...)`
    static func gilroyRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gilroyRegular, size: size)
    }

    /// `UIFont(name: "Gilroy-SemiBold", size: ...)`
    static func gilroySemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gilroySemiBold, size: size)
    }

    static func validate() throws {
      if R.font.gilroyBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Gilroy-Bold' could not be loaded, is 'Gilroy-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gilroyRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Gilroy-Regular' could not be loaded, is 'Gilroy-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gilroySemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Gilroy-SemiBold' could not be loaded, is 'Gilroy-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 11 images.
  struct image {
    /// Image `Account_Icon`.
    static let account_Icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Account_Icon")
    /// Image `Dictation`.
    static let dictation = Rswift.ImageResource(bundle: R.hostingBundle, name: "Dictation")
    /// Image `Pin`.
    static let pin = Rswift.ImageResource(bundle: R.hostingBundle, name: "Pin")
    /// Image `Placemark`.
    static let placemark = Rswift.ImageResource(bundle: R.hostingBundle, name: "Placemark")
    /// Image `SearchResult`.
    static let searchResult = Rswift.ImageResource(bundle: R.hostingBundle, name: "SearchResult")
    /// Image `bookmark_Icon`.
    static let bookmark_Icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "bookmark_Icon")
    /// Image `currentLocation`.
    static let currentLocation = Rswift.ImageResource(bundle: R.hostingBundle, name: "currentLocation")
    /// Image `fav_Icon`.
    static let fav_Icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "fav_Icon")
    /// Image `location2`.
    static let location2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "location2")
    /// Image `location_Icon`.
    static let location_Icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "location_Icon")
    /// Image `rating`.
    static let rating = Rswift.ImageResource(bundle: R.hostingBundle, name: "rating")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Account_Icon", bundle: ..., traitCollection: ...)`
    static func account_Icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.account_Icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Dictation", bundle: ..., traitCollection: ...)`
    static func dictation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dictation, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Pin", bundle: ..., traitCollection: ...)`
    static func pin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Placemark", bundle: ..., traitCollection: ...)`
    static func placemark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placemark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SearchResult", bundle: ..., traitCollection: ...)`
    static func searchResult(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.searchResult, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bookmark_Icon", bundle: ..., traitCollection: ...)`
    static func bookmark_Icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bookmark_Icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "currentLocation", bundle: ..., traitCollection: ...)`
    static func currentLocation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.currentLocation, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fav_Icon", bundle: ..., traitCollection: ...)`
    static func fav_Icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fav_Icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "location2", bundle: ..., traitCollection: ...)`
    static func location2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.location2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "location_Icon", bundle: ..., traitCollection: ...)`
    static func location_Icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.location_Icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rating", bundle: ..., traitCollection: ...)`
    static func rating(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rating, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Main"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 7 nibs.
  struct nib {
    /// Nib `AccountViewController`.
    static let accountViewController = _R.nib._AccountViewController()
    /// Nib `BigTableViewCell`.
    static let bigTableViewCell = _R.nib._BigTableViewCell()
    /// Nib `BookmarkViewController`.
    static let bookmarkViewController = _R.nib._BookmarkViewController()
    /// Nib `LocationViewController`.
    static let locationViewController = _R.nib._LocationViewController()
    /// Nib `PopupTableViewCell`.
    static let popupTableViewCell = _R.nib._PopupTableViewCell()
    /// Nib `SmallTableViewCell`.
    static let smallTableViewCell = _R.nib._SmallTableViewCell()
    /// Nib `searchTableViewCell`.
    static let searchTableViewCell = _R.nib._searchTableViewCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AccountViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.accountViewController) instead")
    static func accountViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.accountViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BigTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.bigTableViewCell) instead")
    static func bigTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bigTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BookmarkViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.bookmarkViewController) instead")
    static func bookmarkViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bookmarkViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LocationViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.locationViewController) instead")
    static func locationViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.locationViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PopupTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.popupTableViewCell) instead")
    static func popupTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.popupTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SmallTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.smallTableViewCell) instead")
    static func smallTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.smallTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "searchTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.searchTableViewCell) instead")
    static func searchTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchTableViewCell)
    }
    #endif

    static func accountViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.accountViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func bigTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BigTableViewCell? {
      return R.nib.bigTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BigTableViewCell
    }

    static func bookmarkViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.bookmarkViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func locationViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.locationViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func popupTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> Any_Mobile_Map_App.PopupTableViewCell? {
      return R.nib.popupTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? Any_Mobile_Map_App.PopupTableViewCell
    }

    static func searchTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> searchTableViewCell? {
      return R.nib.searchTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? searchTableViewCell
    }

    static func smallTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SmallTableViewCell? {
      return R.nib.smallTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SmallTableViewCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `PopupTableViewCell`.
    static let popupTableViewCell: Rswift.ReuseIdentifier<Any_Mobile_Map_App.PopupTableViewCell> = Rswift.ReuseIdentifier(identifier: "PopupTableViewCell")
    /// Reuse identifier `SmallTableViewCell`.
    static let smallTableViewCell: Rswift.ReuseIdentifier<SmallTableViewCell> = Rswift.ReuseIdentifier(identifier: "SmallTableViewCell")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _LocationViewController.validate()
      try _PopupTableViewCell.validate()
    }

    struct _AccountViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AccountViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _BigTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "BigTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BigTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BigTableViewCell
      }

      fileprivate init() {}
    }

    struct _BookmarkViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "BookmarkViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _LocationViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "LocationViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Pin", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Pin' is used in nib 'LocationViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "currentLocation", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'currentLocation' is used in nib 'LocationViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PopupTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = Any_Mobile_Map_App.PopupTableViewCell

      let bundle = R.hostingBundle
      let identifier = "PopupTableViewCell"
      let name = "PopupTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> Any_Mobile_Map_App.PopupTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? Any_Mobile_Map_App.PopupTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "fav_Icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'fav_Icon' is used in nib 'PopupTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SmallTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SmallTableViewCell

      let bundle = R.hostingBundle
      let identifier = "SmallTableViewCell"
      let name = "SmallTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SmallTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SmallTableViewCell
      }

      fileprivate init() {}
    }

    struct _searchTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "searchTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> searchTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? searchTableViewCell
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = TabBarViewController

      let bundle = R.hostingBundle
      let name = "Main"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
